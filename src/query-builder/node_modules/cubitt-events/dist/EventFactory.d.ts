import * as Common from "cubitt-common";
import { EventType } from "./EventType";
import { Event } from "./events/Event";
import { ConnectorAddedEvent } from "./events/ConnectorAddedEvent";
import { EdgeAddedEvent } from "./events/EdgeAddedEvent";
import { ModelAddedEvent } from "./events/ModelAddedEvent";
import { NodeAddedEvent } from "./events/NodeAddedEvent";
import { ConnectorDeletedEvent } from "./events/ConnectorDeletedEvent";
import { EdgeDeletedEvent } from "./events/EdgeDeletedEvent";
import { ModelDeletedEvent } from "./events/ModelDeletedEvent";
import { NodeDeletedEvent } from "./events/NodeDeletedEvent";
import { ConnectorPropertyDeletedEvent } from "./events/ConnectorPropertyDeletedEvent";
import { EdgePropertyDeletedEvent } from "./events/EdgePropertyDeletedEvent";
import { ModelPropertyDeletedEvent } from "./events/ModelPropertyDeletedEvent";
import { NodePropertyDeletedEvent } from "./events/NodePropertyDeletedEvent";
import { ConnectorPropertySetEvent } from "./events/ConnectorPropertySetEvent";
import { EdgePropertySetEvent } from "./events/EdgePropertySetEvent";
import { ModelPropertySetEvent } from "./events/ModelPropertySetEvent";
import { NodePropertySetEvent } from "./events/NodePropertySetEvent";
export declare class EventFactory {
    static parse(jsonObject: Object): Event;
    protected static validateObject(object: Object, keysWithType: Common.Dictionary<ValidationType>): void;
    protected static parseProperties(properties: Object): Common.Dictionary<any>;
    protected static getEventType(type: string): EventType;
    protected static parseConnectorAddedEvent(jsonObject: Object, keys: Common.Dictionary<ValidationType>): ConnectorAddedEvent;
    protected static parseEdgeAddedEvent(jsonObject: Object, keys: Common.Dictionary<ValidationType>): EdgeAddedEvent;
    protected static parseModelAddedEvent(jsonObject: Object, keys: Common.Dictionary<ValidationType>): ModelAddedEvent;
    protected static parseNodeAddedEvent(jsonObject: Object, keys: Common.Dictionary<ValidationType>): NodeAddedEvent;
    protected static parseConnectorDeletedEvent(jsonObject: Object, keys: Common.Dictionary<ValidationType>): ConnectorDeletedEvent;
    protected static parseEdgeDeletedEvent(jsonObject: Object, keys: Common.Dictionary<ValidationType>): EdgeDeletedEvent;
    protected static parseModelDeletedEvent(jsonObject: Object, keys: Common.Dictionary<ValidationType>): ModelDeletedEvent;
    protected static parseNodeDeletedEvent(jsonObject: Object, keys: Common.Dictionary<ValidationType>): NodeDeletedEvent;
    protected static parseConnectorPropertyDeletedEvent(jsonObject: Object, keys: Common.Dictionary<ValidationType>): ConnectorPropertyDeletedEvent;
    protected static parseEdgePropertyDeletedEvent(jsonObject: Object, keys: Common.Dictionary<ValidationType>): EdgePropertyDeletedEvent;
    protected static parseModelPropertyDeletedEvent(jsonObject: Object, keys: Common.Dictionary<ValidationType>): ModelPropertyDeletedEvent;
    protected static parseNodePropertyDeletedEvent(jsonObject: Object, keys: Common.Dictionary<ValidationType>): NodePropertyDeletedEvent;
    protected static parseConnectorPropertySetEvent(jsonObject: Object, keys: Common.Dictionary<ValidationType>): ConnectorPropertySetEvent;
    protected static parseEdgePropertySetEvent(jsonObject: Object, keys: Common.Dictionary<ValidationType>): EdgePropertySetEvent;
    protected static parseModelPropertySetEvent(jsonObject: Object, keys: Common.Dictionary<ValidationType>): ModelPropertySetEvent;
    protected static parseNodePropertySetEvent(jsonObject: Object, keys: Common.Dictionary<ValidationType>): NodePropertySetEvent;
}
export declare enum ValidationType {
    Guid = 0,
    String = 1,
    Properties = 2,
    Any = 3,
    Number = 4,
}
