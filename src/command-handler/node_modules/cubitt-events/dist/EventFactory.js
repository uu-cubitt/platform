"use strict";
var Common = require("cubitt-common");
var EventType_1 = require("./EventType");
var ConnectorAddedEvent_1 = require("./events/ConnectorAddedEvent");
var EdgeAddedEvent_1 = require("./events/EdgeAddedEvent");
var ModelAddedEvent_1 = require("./events/ModelAddedEvent");
var NodeAddedEvent_1 = require("./events/NodeAddedEvent");
var ConnectorDeletedEvent_1 = require("./events/ConnectorDeletedEvent");
var EdgeDeletedEvent_1 = require("./events/EdgeDeletedEvent");
var ModelDeletedEvent_1 = require("./events/ModelDeletedEvent");
var NodeDeletedEvent_1 = require("./events/NodeDeletedEvent");
var ConnectorPropertyDeletedEvent_1 = require("./events/ConnectorPropertyDeletedEvent");
var EdgePropertyDeletedEvent_1 = require("./events/EdgePropertyDeletedEvent");
var ModelPropertyDeletedEvent_1 = require("./events/ModelPropertyDeletedEvent");
var NodePropertyDeletedEvent_1 = require("./events/NodePropertyDeletedEvent");
var ConnectorPropertySetEvent_1 = require("./events/ConnectorPropertySetEvent");
var EdgePropertySetEvent_1 = require("./events/EdgePropertySetEvent");
var ModelPropertySetEvent_1 = require("./events/ModelPropertySetEvent");
var NodePropertySetEvent_1 = require("./events/NodePropertySetEvent");
var EventFactory = (function () {
    function EventFactory() {
    }
    EventFactory.parse = function (jsonObject) {
        if (typeof (jsonObject) === "undefined" || jsonObject === null) {
            throw new Error("EVENT ERROR: Empty object cannot be parsed.");
        }
        var typeString = jsonObject["type"];
        if (typeof (typeString) === "undefined" || typeString === null) {
            throw new Error("EVENT ERROR: Object has no 'type' property.");
        }
        var type = EventFactory.getEventType(typeString);
        var keys = {
            sourceId: ValidationType.Guid,
            version: ValidationType.Number,
            timestamp: ValidationType.Number
        };
        switch (type) {
            case EventType_1.EventType.ConnectorAdded:
                return EventFactory.parseConnectorAddedEvent(jsonObject, keys);
            case EventType_1.EventType.EdgeAdded:
                return EventFactory.parseEdgeAddedEvent(jsonObject, keys);
            case EventType_1.EventType.ModelAdded:
                return EventFactory.parseModelAddedEvent(jsonObject, keys);
            case EventType_1.EventType.NodeAdded:
                return EventFactory.parseNodeAddedEvent(jsonObject, keys);
            case EventType_1.EventType.ConnectorDeleted:
                return EventFactory.parseConnectorDeletedEvent(jsonObject, keys);
            case EventType_1.EventType.EdgeDeleted:
                return EventFactory.parseEdgeDeletedEvent(jsonObject, keys);
            case EventType_1.EventType.ModelDeleted:
                return EventFactory.parseModelDeletedEvent(jsonObject, keys);
            case EventType_1.EventType.NodeDeleted:
                return EventFactory.parseNodeDeletedEvent(jsonObject, keys);
            case EventType_1.EventType.ConnectorPropertyDeleted:
                return EventFactory.parseConnectorPropertyDeletedEvent(jsonObject, keys);
            case EventType_1.EventType.EdgePropertyDeleted:
                return EventFactory.parseEdgePropertyDeletedEvent(jsonObject, keys);
            case EventType_1.EventType.ModelPropertyDeleted:
                return EventFactory.parseModelPropertyDeletedEvent(jsonObject, keys);
            case EventType_1.EventType.NodePropertyDeleted:
                return EventFactory.parseNodePropertyDeletedEvent(jsonObject, keys);
            case EventType_1.EventType.ConnectorPropertySet:
                return EventFactory.parseConnectorPropertySetEvent(jsonObject, keys);
            case EventType_1.EventType.EdgePropertySet:
                return EventFactory.parseEdgePropertySetEvent(jsonObject, keys);
            case EventType_1.EventType.ModelPropertySet:
                return EventFactory.parseModelPropertySetEvent(jsonObject, keys);
            case EventType_1.EventType.NodePropertySet:
                return EventFactory.parseNodePropertySetEvent(jsonObject, keys);
            default:
                throw new Error("EVENT ERROR: Event of EventType '" + type.toString() + "' can not be parsed.");
        }
    };
    EventFactory.validateObject = function (object, keysWithType) {
        for (var key in keysWithType) {
            var type = keysWithType[key];
            var val = object[key];
            if (typeof (val) === "undefined") {
                throw new Error("EVENT ERROR: Attribute '" + key.toString() + "' is missing.");
            }
            switch (type) {
                case ValidationType.Guid:
                    var guid = Common.Guid.parse(val);
                    if (guid === null) {
                        throw new Error("EVENT ERROR: Attribute '" + key.toString() + "' is not a valid GUID.");
                    }
                    break;
                case ValidationType.String:
                    if (val.toString().trim().length === 0) {
                        throw new Error("EVENT ERROR: Attribute '" + key.toString() + "' empty or only whitespaces.");
                    }
                    break;
                case ValidationType.Number:
                    if (parseInt(val, 10) === NaN) {
                        throw new Error("EVENT ERROR: Attribute '" + key.toString() + "' is not a number.");
                    }
                    break;
                case ValidationType.Any:
                    break;
                default:
                    throw new Error("EVENT ERROR: ValidationType " + type.toString() + " is not valid.");
            }
        }
    };
    EventFactory.parseProperties = function (properties) {
        if (typeof (properties) === "undefined" || properties === null) {
            return {};
        }
        if (typeof (properties["type"]) !== "undefined") {
            delete properties["type"];
        }
        return properties;
    };
    EventFactory.getEventType = function (type) {
        switch (type) {
            case "ConnectorAddedEvent":
                return EventType_1.EventType.ConnectorAdded;
            case "EdgeAddedEvent":
                return EventType_1.EventType.EdgeAdded;
            case "ModelAddedEvent":
                return EventType_1.EventType.ModelAdded;
            case "NodeAddedEvent":
                return EventType_1.EventType.NodeAdded;
            case "ConnectorDeletedEvent":
                return EventType_1.EventType.ConnectorDeleted;
            case "EdgeDeletedEvent":
                return EventType_1.EventType.EdgeDeleted;
            case "ModelDeletedEvent":
                return EventType_1.EventType.ModelDeleted;
            case "NodeDeletedEvent":
                return EventType_1.EventType.NodeDeleted;
            case "ConnectorPropertyDeletedEvent":
                return EventType_1.EventType.ConnectorPropertyDeleted;
            case "EdgePropertyDeletedEvent":
                return EventType_1.EventType.EdgePropertyDeleted;
            case "ModelPropertyDeletedEvent":
                return EventType_1.EventType.ModelPropertyDeleted;
            case "NodePropertyDeletedEvent":
                return EventType_1.EventType.NodePropertyDeleted;
            case "ConnectorPropertySetEvent":
                return EventType_1.EventType.ConnectorPropertySet;
            case "EdgePropertySetEvent":
                return EventType_1.EventType.EdgePropertySet;
            case "ModelPropertySetEvent":
                return EventType_1.EventType.ModelPropertySet;
            case "NodePropertySetEvent":
                return EventType_1.EventType.NodePropertySet;
            default:
                throw new Error("EVENT ERROR: EventType " + type.toString() + " is not valid.");
        }
    };
    EventFactory.parseConnectorAddedEvent = function (jsonObject, keys) {
        keys["elementId"] = ValidationType.Guid;
        keys["elementType"] = ValidationType.String;
        keys["nodeId"] = ValidationType.Guid;
        var properties = EventFactory.parseProperties(jsonObject["properties"]);
        EventFactory.validateObject(jsonObject, keys);
        return new ConnectorAddedEvent_1.ConnectorAddedEvent(Common.Guid.parse(jsonObject["sourceId"]), parseInt(jsonObject["version"]), parseInt(jsonObject["timestamp"]), Common.Guid.parse(jsonObject["elementId"]), jsonObject["elementType"].toString(), properties, Common.Guid.parse(jsonObject["nodeId"]));
    };
    EventFactory.parseEdgeAddedEvent = function (jsonObject, keys) {
        keys["elementId"] = ValidationType.Guid;
        keys["elementType"] = ValidationType.String;
        keys["modelId"] = ValidationType.Guid;
        keys["startConnectorId"] = ValidationType.Guid;
        keys["endConnectorId"] = ValidationType.Guid;
        var properties = EventFactory.parseProperties(jsonObject["properties"]);
        EventFactory.validateObject(jsonObject, keys);
        return new EdgeAddedEvent_1.EdgeAddedEvent(Common.Guid.parse(jsonObject["sourceId"]), parseInt(jsonObject["version"]), parseInt(jsonObject["timestamp"]), Common.Guid.parse(jsonObject["elementId"]), jsonObject["elementType"].toString(), properties, Common.Guid.parse(jsonObject["modelId"]), Common.Guid.parse(jsonObject["startConnectorId"]), Common.Guid.parse(jsonObject["endConnectorId"]));
    };
    EventFactory.parseModelAddedEvent = function (jsonObject, keys) {
        keys["elementId"] = ValidationType.Guid;
        keys["elementType"] = ValidationType.String;
        if (typeof (jsonObject["parentId"]) !== "undefined" && jsonObject["parentId"] !== null) {
            keys["parentId"] = ValidationType.Guid;
        }
        var properties = EventFactory.parseProperties(jsonObject["properties"]);
        EventFactory.validateObject(jsonObject, keys);
        return new ModelAddedEvent_1.ModelAddedEvent(Common.Guid.parse(jsonObject["sourceId"]), parseInt(jsonObject["version"]), parseInt(jsonObject["timestamp"]), Common.Guid.parse(jsonObject["elementId"]), jsonObject["elementType"].toString(), properties, Common.Guid.parse(jsonObject["parentId"]));
    };
    EventFactory.parseNodeAddedEvent = function (jsonObject, keys) {
        keys["elementId"] = ValidationType.Guid;
        keys["elementType"] = ValidationType.String;
        keys["modelId"] = ValidationType.Guid;
        var properties = EventFactory.parseProperties(jsonObject["properties"]);
        EventFactory.validateObject(jsonObject, keys);
        return new NodeAddedEvent_1.NodeAddedEvent(Common.Guid.parse(jsonObject["sourceId"]), parseInt(jsonObject["version"]), parseInt(jsonObject["timestamp"]), Common.Guid.parse(jsonObject["elementId"]), jsonObject["elementType"].toString(), properties, Common.Guid.parse(jsonObject["modelId"]));
    };
    EventFactory.parseConnectorDeletedEvent = function (jsonObject, keys) {
        keys["elementId"] = ValidationType.Guid;
        EventFactory.validateObject(jsonObject, keys);
        return new ConnectorDeletedEvent_1.ConnectorDeletedEvent(Common.Guid.parse(jsonObject["sourceId"]), parseInt(jsonObject["version"]), parseInt(jsonObject["timestamp"]), Common.Guid.parse(jsonObject["elementId"]));
    };
    EventFactory.parseEdgeDeletedEvent = function (jsonObject, keys) {
        keys["elementId"] = ValidationType.Guid;
        EventFactory.validateObject(jsonObject, keys);
        return new EdgeDeletedEvent_1.EdgeDeletedEvent(Common.Guid.parse(jsonObject["sourceId"]), parseInt(jsonObject["version"]), parseInt(jsonObject["timestamp"]), Common.Guid.parse(jsonObject["elementId"]));
    };
    EventFactory.parseModelDeletedEvent = function (jsonObject, keys) {
        keys["elementId"] = ValidationType.Guid;
        EventFactory.validateObject(jsonObject, keys);
        return new ModelDeletedEvent_1.ModelDeletedEvent(Common.Guid.parse(jsonObject["sourceId"]), parseInt(jsonObject["version"]), parseInt(jsonObject["timestamp"]), Common.Guid.parse(jsonObject["elementId"]));
    };
    EventFactory.parseNodeDeletedEvent = function (jsonObject, keys) {
        keys["elementId"] = ValidationType.Guid;
        EventFactory.validateObject(jsonObject, keys);
        return new NodeDeletedEvent_1.NodeDeletedEvent(Common.Guid.parse(jsonObject["sourceId"]), parseInt(jsonObject["version"]), parseInt(jsonObject["timestamp"]), Common.Guid.parse(jsonObject["elementId"]));
    };
    EventFactory.parseConnectorPropertyDeletedEvent = function (jsonObject, keys) {
        keys["elementId"] = ValidationType.Guid;
        keys["propertyName"] = ValidationType.String;
        EventFactory.validateObject(jsonObject, keys);
        return new ConnectorPropertyDeletedEvent_1.ConnectorPropertyDeletedEvent(Common.Guid.parse(jsonObject["sourceId"]), parseInt(jsonObject["version"]), parseInt(jsonObject["timestamp"]), Common.Guid.parse(jsonObject["elementId"]), jsonObject["propertyName"].toString());
    };
    EventFactory.parseEdgePropertyDeletedEvent = function (jsonObject, keys) {
        keys["elementId"] = ValidationType.Guid;
        keys["propertyName"] = ValidationType.String;
        EventFactory.validateObject(jsonObject, keys);
        return new EdgePropertyDeletedEvent_1.EdgePropertyDeletedEvent(Common.Guid.parse(jsonObject["sourceId"]), parseInt(jsonObject["version"]), parseInt(jsonObject["timestamp"]), Common.Guid.parse(jsonObject["elementId"]), jsonObject["propertyName"].toString());
    };
    EventFactory.parseModelPropertyDeletedEvent = function (jsonObject, keys) {
        keys["elementId"] = ValidationType.Guid;
        keys["propertyName"] = ValidationType.String;
        EventFactory.validateObject(jsonObject, keys);
        return new ModelPropertyDeletedEvent_1.ModelPropertyDeletedEvent(Common.Guid.parse(jsonObject["sourceId"]), parseInt(jsonObject["version"]), parseInt(jsonObject["timestamp"]), Common.Guid.parse(jsonObject["elementId"]), jsonObject["propertyName"].toString());
    };
    EventFactory.parseNodePropertyDeletedEvent = function (jsonObject, keys) {
        keys["elementId"] = ValidationType.Guid;
        keys["propertyName"] = ValidationType.String;
        EventFactory.validateObject(jsonObject, keys);
        return new NodePropertyDeletedEvent_1.NodePropertyDeletedEvent(Common.Guid.parse(jsonObject["sourceId"]), parseInt(jsonObject["version"]), parseInt(jsonObject["timestamp"]), Common.Guid.parse(jsonObject["elementId"]), jsonObject["propertyName"].toString());
    };
    EventFactory.parseConnectorPropertySetEvent = function (jsonObject, keys) {
        keys["elementId"] = ValidationType.Guid;
        keys["propertyName"] = ValidationType.String;
        keys["propertyValue"] = ValidationType.Any;
        EventFactory.validateObject(jsonObject, keys);
        return new ConnectorPropertySetEvent_1.ConnectorPropertySetEvent(Common.Guid.parse(jsonObject["sourceId"]), parseInt(jsonObject["version"]), parseInt(jsonObject["timestamp"]), Common.Guid.parse(jsonObject["elementId"]), jsonObject["propertyName"].toString(), jsonObject["propertyValue"]);
    };
    EventFactory.parseEdgePropertySetEvent = function (jsonObject, keys) {
        keys["elementId"] = ValidationType.Guid;
        keys["propertyName"] = ValidationType.String;
        keys["propertyValue"] = ValidationType.Any;
        EventFactory.validateObject(jsonObject, keys);
        return new EdgePropertySetEvent_1.EdgePropertySetEvent(Common.Guid.parse(jsonObject["sourceId"]), parseInt(jsonObject["version"]), parseInt(jsonObject["timestamp"]), Common.Guid.parse(jsonObject["elementId"]), jsonObject["propertyName"].toString(), jsonObject["propertyValue"]);
    };
    EventFactory.parseModelPropertySetEvent = function (jsonObject, keys) {
        keys["elementId"] = ValidationType.Guid;
        keys["propertyName"] = ValidationType.String;
        keys["propertyValue"] = ValidationType.Any;
        EventFactory.validateObject(jsonObject, keys);
        return new ModelPropertySetEvent_1.ModelPropertySetEvent(Common.Guid.parse(jsonObject["sourceId"]), parseInt(jsonObject["version"]), parseInt(jsonObject["timestamp"]), Common.Guid.parse(jsonObject["elementId"]), jsonObject["propertyName"].toString(), jsonObject["propertyValue"]);
    };
    EventFactory.parseNodePropertySetEvent = function (jsonObject, keys) {
        keys["elementId"] = ValidationType.Guid;
        keys["propertyName"] = ValidationType.String;
        keys["propertyValue"] = ValidationType.Any;
        EventFactory.validateObject(jsonObject, keys);
        return new NodePropertySetEvent_1.NodePropertySetEvent(Common.Guid.parse(jsonObject["sourceId"]), parseInt(jsonObject["version"]), parseInt(jsonObject["timestamp"]), Common.Guid.parse(jsonObject["elementId"]), jsonObject["propertyName"].toString(), jsonObject["propertyValue"]);
    };
    return EventFactory;
}());
exports.EventFactory = EventFactory;
(function (ValidationType) {
    ValidationType[ValidationType["Guid"] = 0] = "Guid";
    ValidationType[ValidationType["String"] = 1] = "String";
    ValidationType[ValidationType["Properties"] = 2] = "Properties";
    ValidationType[ValidationType["Any"] = 3] = "Any";
    ValidationType[ValidationType["Number"] = 4] = "Number";
})(exports.ValidationType || (exports.ValidationType = {}));
var ValidationType = exports.ValidationType;
//# sourceMappingURL=EventFactory.js.map