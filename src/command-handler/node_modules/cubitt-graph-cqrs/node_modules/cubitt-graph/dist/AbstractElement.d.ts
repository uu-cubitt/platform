import * as Common from "cubitt-common";
import { ElementType } from "./ElementType";
import { Graph } from "./Graph";
export declare abstract class AbstractElement {
    protected id: Common.Guid;
    protected type: ElementType;
    protected properties: Common.Dictionary<any>;
    protected parentNodeNeighbours: Common.Dictionary<Common.Guid>;
    protected childNodeNeighbours: Common.Dictionary<Common.Guid>;
    protected parentEdgeNeighbours: Common.Dictionary<Common.Guid>;
    protected childEdgeNeighbours: Common.Dictionary<Common.Guid>;
    protected parentConnectorNeighbours: Common.Dictionary<Common.Guid>;
    protected childConnectorNeighbours: Common.Dictionary<Common.Guid>;
    protected parentModelNeighbours: Common.Dictionary<Common.Guid>;
    protected childModelNeighbours: Common.Dictionary<Common.Guid>;
    /**
     * @param id GUID of the Element that is created
     * @param properties of the Element
     */
    constructor(id: Common.Guid, properties: Common.Dictionary<any>);
    /**
     * Returns identifier of this element
     */
    Id: Common.Guid;
    /**
     * Returns type of this element
     */
    abstract getType(): ElementType;
    /**
     * Delete this element
     *
     * @param graph Graph containing this element
     */
    abstract delete(graph: Graph): void;
    /**
     * Internal function that removes THIS element ONLY.
     * WARNING: This function does not perform a cascading delete (i.e remove orphan edges)
     * Use delete() instead
     *
     * @param graph Graph containing this element
     */
    protected remove(graph: Graph): void;
    /**
     * Adds a neighbour of type Node as *parent* to this Element
     *
     * @param id Guid of the element that should be added
     */
    addParentNodeNeighbour(id: Common.Guid): void;
    /**
     * Adds a neighbour of type Node as *child* to this Element
     *
     * @param id Guid of the element that should be added
     */
    addChildNodeNeighbour(id: Common.Guid): void;
    /**
     * Adds a Neighbour of type Edge as *parent* to this Element
     *
     * @param id Guid of the element that should be added
     */
    addParentEdgeNeighbour(id: Common.Guid): void;
    /**
     * Adds a Neighbour of type Edge as *child* to this Element
     *
     * @param id Guid of the element that should be added
     */
    addChildEdgeNeighbour(id: Common.Guid): void;
    /**
     * Adds a neighbour of type Connector as *parent* to this Element
     *
     * @param id Guid of the element that should be added
     */
    addParentConnectorNeighbour(id: Common.Guid): void;
    /**
     * Adds a neighbour of type Connector as *child* to this Element
     *
     * @param id Guid of the element that should be added
     */
    addChildConnectorNeighbour(id: Common.Guid): void;
    /**
     * Adds a neighbour of type Model as *parent* to this Element
     *
     * @param id Guid of the element that should be added
     */
    addParentModelNeighbour(id: Common.Guid): void;
    /**
     * Adds a neighbour of type Model as *child* to this Element
     *
     * @param id Guid of the element that should be added
     */
    addChildModelNeighbour(id: Common.Guid): void;
    /**
     * Returns all Parent neighbours of type Node
     */
    getParentNodeNeighbours(): Common.Guid[];
    /**
     * Returns all Child neighbours of type Node
     */
    getChildNodeNeighbours(): Common.Guid[];
    /**
     * Returns all Parent neighbours of type Edge
     */
    getParentEdgeNeighbours(): Common.Guid[];
    /**
     * Returns all Child neighbours of type Edge
     */
    getChildEdgeNeighbours(): Common.Guid[];
    /**
     * Returns all Parent neighbours of type Connector
     */
    getParentConnectorNeighbours(): Common.Guid[];
    /**
     * Returns all Child neighbours of type Connector
     */
    getChildConnectorNeighbours(): Common.Guid[];
    /**
     * Returns all *Parent* neighbours of type Model
     */
    getParentModelNeighbours(): Common.Guid[];
    /**
     * Returns all *Children* neighbous of type Model
     */
    getChildModelNeighbours(): Common.Guid[];
    /**
     * Sets a property on this Element
     *
     * @param name Name of the property to set
     * @param value desired value
     */
    setProperty(name: string, value: any): void;
    /**
     * Delete a property on this Element
     *
     * @param id Identifier of the Node
     * @param name of the property
     */
    deleteProperty(name: string): void;
    /**
     * Returns all properties of this Element
     */
    getProperties(): Common.Dictionary<any>;
    /**
     * Unlink a link to a neighbouring child Node
     *
     * @param id Identifier of the child Node that should be unlinked
     */
    unlinkChildNodeNeighbour(id: Common.Guid): void;
    /**
     * Unlink a link to a neighbouring Child Edge
     *
     * @param id Identifier of the Child Edge that should be unlinked
     */
    unlinkChildEdgeNeighbour(id: Common.Guid): void;
    /**
     * Unlink a link to a neighbouring Child Connector
     *
     * @param id Identifier of the Connector that should be unlinked
     */
    unlinkChildConnectorNeighbour(id: Common.Guid): void;
    /**
     * Unlink a link to a neighbouring child Model
     *
     * @param id Identifier of the child Model that should be unlinked
     */
    unlinkChildModelNeighbour(id: Common.Guid): void;
    /**
     * Converts a Dictionary to an Array
     *
     * @param dictionary The dictionary to convert
     */
    private toArray(dictionary);
}
