"use strict";
var Graph = require("cubitt-graph");
var Commands = require("cubitt-commands");
var Events = require("cubitt-events");
var CQRSGraph = (function () {
    function CQRSGraph(graph, version) {
        if (typeof (graph) === "undefined" || graph === null) {
            this.graph = new Graph.Project();
            this.version = 0;
        }
        else {
            this.graph = graph;
            this.version = version;
        }
        this.rollbackGraph = null;
        this.rollbackVersion = null;
    }
    CQRSGraph.prototype.GetGraph = function () {
        return this.graph.deserialize(this.graph.serialize());
    };
    CQRSGraph.prototype.GetVersion = function () {
        return this.version;
    };
    CQRSGraph.prototype.BeginTransaction = function () {
        if (this.rollbackGraph !== null) {
            throw new Error("CQRS ERROR: Transaction already in progress.");
        }
        this.rollbackGraph = this.graph.serialize();
        this.rollbackVersion = this.version;
    };
    CQRSGraph.prototype.CommitTransaction = function () {
        if (this.rollbackGraph === null) {
            throw new Error("CQRS ERROR: No transaction in progress.");
        }
        this.rollbackGraph = null;
        this.rollbackVersion = null;
    };
    CQRSGraph.prototype.Rollback = function () {
        if (this.rollbackGraph === null) {
            throw new Error("CQRS ERROR: No transaction in progress.");
        }
        this.graph = this.graph.deserialize(this.rollbackGraph);
        this.rollbackGraph = null;
        this.version = this.rollbackVersion;
        this.rollbackVersion = null;
    };
    CQRSGraph.prototype.ApplyCommand = function (command) {
        switch (command.type) {
            case Commands.CommandType.AddConnector:
                var addConnectorCommand = command;
                this.AddConnector(addConnectorCommand);
                this.version++;
                return new Events.ConnectorAddedEvent(addConnectorCommand.id, this.version - 1, Date.now(), addConnectorCommand.elementId, addConnectorCommand.elementType, addConnectorCommand.elementProperties, addConnectorCommand.nodeId);
            case Commands.CommandType.AddEdge:
                var addEdgeCommand = command;
                this.AddEdge(addEdgeCommand);
                this.version++;
                return new Events.EdgeAddedEvent(addEdgeCommand.id, this.version - 1, Date.now(), addEdgeCommand.elementId, addEdgeCommand.elementType, addEdgeCommand.elementProperties, addEdgeCommand.modelId, addEdgeCommand.startConnectorId, addEdgeCommand.endConnectorId);
            case Commands.CommandType.AddModel:
                var addModelCommand = command;
                this.AddModel(addModelCommand);
                this.version++;
                return new Events.ModelAddedEvent(addModelCommand.id, this.version - 1, Date.now(), addModelCommand.elementId, addModelCommand.elementType, addModelCommand.elementProperties, addModelCommand.ParentId);
            case Commands.CommandType.AddNode:
                var addNodeCommand = command;
                this.AddNode(addNodeCommand);
                this.version++;
                return new Events.NodeAddedEvent(addNodeCommand.id, this.version - 1, Date.now(), addNodeCommand.elementId, addNodeCommand.elementType, addNodeCommand.elementProperties, addNodeCommand.modelId);
            case Commands.CommandType.DeleteConnector:
                var deleteConnectorCommand = command;
                this.DeleteConnector(deleteConnectorCommand);
                this.version++;
                return new Events.ConnectorDeletedEvent(deleteConnectorCommand.id, this.version - 1, Date.now(), deleteConnectorCommand.elementId);
            case Commands.CommandType.DeleteEdge:
                var deleteEdgeCommand = command;
                this.DeleteEdge(deleteEdgeCommand);
                this.version++;
                return new Events.EdgeDeletedEvent(deleteEdgeCommand.id, this.version - 1, Date.now(), deleteEdgeCommand.elementId);
            case Commands.CommandType.DeleteModel:
                var deleteModelCommand = command;
                this.DeleteModel(deleteModelCommand);
                this.version++;
                return new Events.ModelDeletedEvent(deleteModelCommand.id, this.version - 1, Date.now(), deleteModelCommand.elementId);
            case Commands.CommandType.DeleteNode:
                var deleteNodeCommand = command;
                this.DeleteNode(deleteNodeCommand);
                this.version++;
                return new Events.NodeDeletedEvent(deleteNodeCommand.id, this.version - 1, Date.now(), deleteNodeCommand.elementId);
            case Commands.CommandType.DeleteConnectorProperty:
                var deleteConnectorPropertyCommand = command;
                this.DeleteConnectorProperty(deleteConnectorPropertyCommand);
                this.version++;
                return new Events.ConnectorPropertyDeletedEvent(deleteConnectorPropertyCommand.id, this.version - 1, Date.now(), deleteConnectorPropertyCommand.elementId, deleteConnectorPropertyCommand.propertyName);
            case Commands.CommandType.DeleteEdgeProperty:
                var deleteEdgePropertyCommand = command;
                this.DeleteEdgeProperty(deleteEdgePropertyCommand);
                this.version++;
                return new Events.EdgePropertyDeletedEvent(deleteEdgePropertyCommand.id, this.version - 1, Date.now(), deleteEdgePropertyCommand.elementId, deleteEdgePropertyCommand.propertyName);
            case Commands.CommandType.DeleteModelProperty:
                var deleteModelPropertyCommand = command;
                this.DeleteModelProperty(deleteModelPropertyCommand);
                this.version++;
                return new Events.ModelPropertyDeletedEvent(deleteModelPropertyCommand.id, this.version - 1, Date.now(), deleteModelPropertyCommand.elementId, deleteModelPropertyCommand.propertyName);
            case Commands.CommandType.DeleteNodeProperty:
                var deleteNodeProperty = command;
                this.DeleteNodeProperty(deleteNodeProperty);
                this.version++;
                return new Events.NodePropertyDeletedEvent(deleteNodeProperty.id, this.version - 1, Date.now(), deleteNodeProperty.elementId, deleteNodeProperty.propertyName);
            case Commands.CommandType.SetConnectorProperty:
                var setConnectorPropertyCommand = command;
                this.SetConnectorProperty(setConnectorPropertyCommand);
                this.version++;
                return new Events.ConnectorPropertySetEvent(setConnectorPropertyCommand.id, this.version - 1, Date.now(), setConnectorPropertyCommand.elementId, setConnectorPropertyCommand.propertyName, setConnectorPropertyCommand.propertyValue);
            case Commands.CommandType.SetEdgeProperty:
                var setEdgePropertyCommand = command;
                this.SetEdgeProperty(setEdgePropertyCommand);
                this.version++;
                return new Events.EdgePropertySetEvent(setEdgePropertyCommand.id, this.version - 1, Date.now(), setEdgePropertyCommand.elementId, setEdgePropertyCommand.propertyName, setEdgePropertyCommand.propertyValue);
            case Commands.CommandType.SetModelProperty:
                var setModelPropertyCommand = command;
                this.SetModelProperty(setModelPropertyCommand);
                this.version++;
                return new Events.ModelPropertySetEvent(setModelPropertyCommand.id, this.version - 1, Date.now(), setModelPropertyCommand.elementId, setModelPropertyCommand.propertyName, setModelPropertyCommand.propertyValue);
            case Commands.CommandType.SetNodeProperty:
                var setNodePropertyCommand = command;
                this.SetNodeProperty(setNodePropertyCommand);
                this.version++;
                return new Events.NodePropertySetEvent(setNodePropertyCommand.id, this.version - 1, Date.now(), setNodePropertyCommand.elementId, setNodePropertyCommand.propertyName, setNodePropertyCommand.propertyValue);
            default:
                throw new Error("CQRS ERROR: Command of type: " + command.type + " cannot be applied.");
        }
    };
    CQRSGraph.prototype.ApplyEvent = function (event) {
        switch (event.type) {
            case Events.EventType.ConnectorAdded:
                this.AddConnector(event);
                break;
            case Events.EventType.EdgeAdded:
                this.AddEdge(event);
                break;
            case Events.EventType.ModelAdded:
                this.AddModel(event);
                break;
            case Events.EventType.NodeAdded:
                this.AddNode(event);
                break;
            case Events.EventType.ConnectorDeleted:
                this.DeleteConnector(event);
                break;
            case Events.EventType.EdgeDeleted:
                this.DeleteEdge(event);
                break;
            case Events.EventType.ModelDeleted:
                this.DeleteModel(event);
                break;
            case Events.EventType.NodeDeleted:
                this.DeleteNode(event);
                break;
            case Events.EventType.ConnectorPropertySet:
                this.SetConnectorProperty(event);
                break;
            case Events.EventType.EdgePropertySet:
                this.SetEdgeProperty(event);
                break;
            case Events.EventType.ModelPropertySet:
                this.SetModelProperty(event);
                break;
            case Events.EventType.NodePropertySet:
                this.SetNodeProperty(event);
                break;
            case Events.EventType.ConnectorPropertyDeleted:
                this.DeleteConnectorProperty(event);
                break;
            case Events.EventType.EdgePropertyDeleted:
                this.DeleteEdgeProperty(event);
                break;
            case Events.EventType.ModelPropertyDeleted:
                this.DeleteModelProperty(event);
                break;
            case Events.EventType.NodePropertyDeleted:
                this.DeleteNodeProperty(event);
                break;
            default:
                throw new Error("CQRS ERROR: Event of type: " + event.type + " cannot be applied.");
        }
        this.version++;
    };
    CQRSGraph.prototype.AddConnector = function (action) {
        this.graph.addConnector(action.elementId, action.elementType, action.nodeId, action.elementProperties);
    };
    CQRSGraph.prototype.AddEdge = function (action) {
        this.graph.addEdge(action.elementId, action.elementType, action.modelId, action.startConnectorId, action.endConnectorId, action.elementProperties);
    };
    CQRSGraph.prototype.AddModel = function (action) {
        this.graph.addModel(action.elementId, action.elementType, action.elementProperties);
    };
    CQRSGraph.prototype.AddNode = function (action) {
        this.graph.addNode(action.elementId, action.elementType, action.modelId, action.elementProperties);
    };
    CQRSGraph.prototype.DeleteConnector = function (action) {
        this.graph.deleteConnector(action.elementId);
    };
    CQRSGraph.prototype.DeleteEdge = function (action) {
        this.graph.deleteEdge(action.elementId);
    };
    CQRSGraph.prototype.DeleteModel = function (action) {
        this.graph.deleteModel(action.elementId);
    };
    CQRSGraph.prototype.DeleteNode = function (action) {
        this.graph.deleteNode(action.elementId);
    };
    CQRSGraph.prototype.DeleteConnectorProperty = function (action) {
        this.graph.deleteProperty(action.elementId, action.propertyName);
    };
    CQRSGraph.prototype.DeleteEdgeProperty = function (action) {
        this.graph.deleteProperty(action.elementId, action.propertyName);
    };
    CQRSGraph.prototype.DeleteModelProperty = function (action) {
        this.graph.deleteProperty(action.elementId, action.propertyName);
    };
    CQRSGraph.prototype.DeleteNodeProperty = function (action) {
        this.graph.deleteProperty(action.elementId, action.propertyName);
    };
    CQRSGraph.prototype.SetConnectorProperty = function (action) {
        this.graph.setProperty(action.elementId, action.propertyName, action.propertyValue);
    };
    CQRSGraph.prototype.SetEdgeProperty = function (action) {
        this.graph.setProperty(action.elementId, action.propertyName, action.propertyValue);
    };
    CQRSGraph.prototype.SetModelProperty = function (action) {
        this.graph.setProperty(action.elementId, action.propertyName, action.propertyValue);
    };
    CQRSGraph.prototype.SetNodeProperty = function (action) {
        this.graph.setProperty(action.elementId, action.propertyName, action.propertyValue);
    };
    return CQRSGraph;
}());
exports.CQRSGraph = CQRSGraph;
//# sourceMappingURL=CQRSGraph.js.map