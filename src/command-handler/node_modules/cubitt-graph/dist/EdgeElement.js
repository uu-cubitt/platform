"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ElementType_1 = require("./ElementType");
var AbstractElement_1 = require("./AbstractElement");
var EdgeElement = (function (_super) {
    __extends(EdgeElement, _super);
    function EdgeElement() {
        _super.apply(this, arguments);
    }
    /**
     * @inheritdoc
     */
    EdgeElement.prototype.getType = function () {
        return ElementType_1.ElementType.Edge;
    };
    /**
     * Override that ensures that the StartConnector is element 0, Endconnector is element 1
     * Any (potential) other connectors are at indices > 1
     */
    EdgeElement.prototype.getConnectorNeighbours = function () {
        var connectors = [];
        connectors.push(this.start);
        connectors.push(this.end);
        return connectors;
    };
    /**
     * Sets the StartConnector
     *
     * @param ConnectorID ID of the connector
     */
    EdgeElement.prototype.addStartConnector = function (connectorId) {
        this.start = connectorId;
        this.addParentConnectorNeighbour(connectorId);
    };
    /**
     * Sets the EndConnector
     *
     * @param ConnectorID ID of the connector
     */
    EdgeElement.prototype.addEndConnector = function (connectorId) {
        this.end = connectorId;
        this.addParentConnectorNeighbour(connectorId);
    };
    /**
     * @inheritdoc
     */
    EdgeElement.prototype.delete = function (graph) {
        var connectorIds = this.getConnectorNeighbours();
        for (var _i = 0, connectorIds_1 = connectorIds; _i < connectorIds_1.length; _i++) {
            var connectorId = connectorIds_1[_i];
            var connector = graph.getElement(connectorId);
            connector.unlinkChildEdgeNeighbour(this.id);
        }
        // Unlink from model
        var modelIds = this.getParentModelNeighbours();
        for (var _a = 0, modelIds_1 = modelIds; _a < modelIds_1.length; _a++) {
            var modelId = modelIds_1[_a];
            var model = graph.getElement(modelId);
            model.unlinkChildEdgeNeighbour(this.id);
        }
        // Remove child models (if any)
        var childModels = this.getChildModelNeighbours();
        for (var _b = 0, childModels_1 = childModels; _b < childModels_1.length; _b++) {
            var childModelId = childModels_1[_b];
            var childModel = graph.getElement(childModelId);
            childModel.delete(graph);
        }
        this.remove(graph);
    };
    return EdgeElement;
}(AbstractElement_1.AbstractElement));
exports.EdgeElement = EdgeElement;
//# sourceMappingURL=EdgeElement.js.map