import * as Common from "cubitt-common";
import { AbstractElement } from "./AbstractElement";
import { GraphInterface } from "./GraphInterface";
import { ElementType } from "./ElementType";
/**
 * Graph containing nodes, connectors, edges and models
 *
 * NOTICE: this class is used internally in the Project class, always use the Project class
 */
export declare class Graph implements GraphInterface {
    private elements;
    constructor();
    /**
     * Returns an element given an GUID
     *
     * @param id GUID representing an element identifier
     */
    getElement(id: Common.Guid): AbstractElement;
    /**
     * @inheritdoc
     */
    hasElement(id: Common.Guid): boolean;
    /**
     * @inheritdoc
     */
    hasModel(id: Common.Guid): boolean;
    /**
     * @inheritdoc
     */
    hasNode(id: Common.Guid): boolean;
    /**
     * @inheritdoc
     */
    hasConnector(id: Common.Guid): boolean;
    /**
     * @inheritdoc
     */
    hasEdge(id: Common.Guid): boolean;
    /**
     * Removes an element from the graph, WARNING: does not perform a cascading delete (i.e. no removal of orphan edges)
     *
     * @param id Identifier of the element to remove
     * @param ofType Only delete the element if it is of the matching Type, if undefined, this check will be skipped
     */
    deleteElement(id: Common.Guid, ofType?: ElementType): void;
    /**
     * @inheritdoc
     */
    addNode(id: Common.Guid, type: string, modelId: Common.Guid, properties: Common.Dictionary<any>): void;
    /**
     * @inheritdoc
     */
    addEdge(id: Common.Guid, type: string, modelId: Common.Guid, startConnectorId: Common.Guid, endConnectorId: Common.Guid, properties?: Common.Dictionary<any>): void;
    /**
     * @inheritdoc
     */
    addConnector(id: Common.Guid, type: string, nodeId: Common.Guid, properties: Common.Dictionary<any>): void;
    /**
     * @inheritdoc
     */
    addModel(id: Common.Guid, type: string, properties: Common.Dictionary<any>, parentId?: Common.Guid): void;
    /**
     * @inheritdoc
     */
    setProperty(id: Common.Guid, name: string, value: any): void;
    /**
     * @inheritdoc
     */
    deleteNode(id: Common.Guid): void;
    /**
     * @inheritdoc
     */
    deleteEdge(id: Common.Guid): void;
    /**
     * @inheritdoc
     */
    deleteConnector(id: Common.Guid): void;
    /**
     * @inheritdoc
     */
    deleteModel(id: Common.Guid): void;
    /**
     * @inheritdoc
     */
    deleteProperty(id: Common.Guid, name: string): void;
    /**
     * @inheritdoc
     */
    deserialize(jsonObject: Object): GraphInterface;
    /**
     * Iterate over the child elements to add them
     *
     * @param type Type of the child elements
     * @param children the Children to iterate over
     * @param queue The queue to add elements to
     * @param inQueue register which elements are processed
     */
    private enqueueChildElement(type, children, queue, inQueue);
    /**
     * Creates a Property dictionary from JSON
     *
     * @param jsonProperties JSON object that contains the properties
     */
    private propertiesFromJSON(jsonProperties);
    /**
     * @inheritdoc
     */
    serialize(): {
        "models": {};
        "nodes": {};
        "edges": {};
        "connectors": {};
    };
}
